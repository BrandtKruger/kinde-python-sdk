# coding: utf-8

"""
    Kinde Management API

     Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

    The version of the OpenAPI document: 1
    Contact: support@kinde.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kinde_sdk.models.create_organization_request import CreateOrganizationRequest

class TestCreateOrganizationRequest(unittest.TestCase):
    """CreateOrganizationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateOrganizationRequest:
        """Test CreateOrganizationRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateOrganizationRequest`
        """
        model = CreateOrganizationRequest()
        if include_optional:
            return CreateOrganizationRequest(
                name = 'Acme Corp',
                feature_flags = {
                    'str' : 'str'
                    },
                external_id = 'some1234',
                background_color = '',
                button_color = '',
                button_text_color = '',
                link_color = '',
                background_color_dark = '',
                button_color_dark = '',
                button_text_color_dark = '',
                link_color_dark = '',
                theme_code = '',
                handle = 'acme_corp',
                is_allow_registrations = True,
                sender_name = 'Acme Corp',
                sender_email = 'hello@acmecorp.com',
                is_create_billing_customer = False,
                billing_email = 'billing@acmecorp.com',
                billing_plan_code = 'pro'
            )
        else:
            return CreateOrganizationRequest(
                name = 'Acme Corp',
        )
        """

    def testCreateOrganizationRequest(self):
        """Test CreateOrganizationRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
